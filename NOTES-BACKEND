@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@ USERS AND THEIR ROLES @@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
In the context of your registerUser method, roles serve an important purpose in defining
the permissions and access levels of users within your application. Here's a breakdown
of why roles might be necessary in this method:

1. Role-Based Access Control (RBAC)
        Roles are commonly used in applications to implement Role-Based Access Control (RBAC),
        which restricts system access based on the roles assigned to users. Each role can have
        specific permissions associated with it, allowing you to control what users can and
        cannot do within the application.

2. User Privileges
        By allowing users to be associated with one or more roles at registration:
            -You can define what actions a user is allowed to perform.
            -Different user roles (like Admin, User, Moderator, etc.) can have varying levels
            of access to resources or functionalities.

3. Flexibility and Scalability
        Having a flexible role assignment during registration:
            -Supports a scalable way to manage user permissions. As your
            application grows, you can add more roles and permissions
            without altering the core user management logic.
            -Makes it easier to assign multiple roles to a user if needed,
            facilitating complex permission scenarios.

4. Enhanced User Experience
Assigning roles at the time of registration can lead to a more personalized experience:
        -Users can be directed to different features of the
        application based on their role.
        -It can also help in customizing the content they see,
        based on their privileges.

5. Implementation of Business Logic
In many applications, different roles can have distinct workflows:
For example, an Admin might have the ability to create and manage other users,
while a regular user can only access and manage their own data.
    Example of Roles...
    Here are some examples of roles you might implement:
        -Admin:
            Full access to manage the application and users.
        -User:
            Basic access to perform actions related to their account
            (like viewing and editing their information).
        -Moderator:
            Can manage content and moderate user interactions.

Summary:
In your registerUser method, the code iterates through userRequest.getRoleIds() to
assign roles to the newly registered user. This helps establish their permissions
and the functionality they can access within the application, aligning with the
principles of role-based access control.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ PRIMITIVE VS WRAPPER @@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Primitive Type vs. Wrapper Type

-int: This is a primitive data type. It cannot be null, which means that
if the value is not set, it defaults to 0.

-Integer: This is a wrapper type. It can be null, allowing you to explicitly
indicate that a value is absent. This is particularly useful in databases
where a value might be null.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@ Basic Attributes vs. References to Other Entities @@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1. Basic Attributes vs. References to Other Entities
Basic Attributes:
    Fields like tourName, description, price, departureDate, and returnDate are basic
    attributes of the Tour entity. These fields are self-contained and can be directly
    set from the AddTourRequest because their values do not rely on other entities.
    They are not represented by an entity in the database; they simply describe the tour itself.
References to Other Entities:
    Fields like fromCountry, toCountry, fromCity, toCity, fromAirport, and toAirport
    represent relationships to other entities. These fields are not just plain data;
    they are references (or foreign keys) to other tables/entities in your database.
    To set these references in your Tour entity, you need to:
        -Retrieve the corresponding entity (e.g., Country, City, Airport) from the database.
        -Ensure that these entities exist before you assign them to your Tour object.

    Example Clarification
    Hereâ€™s how to think about it in a practical sense:

    -Basic Fields:
            tour.setTourName(addTourRequest.getTourName());
            tour.setPrice(addTourRequest.getPrice());
            // These are direct values, no need to fetch anything from the database.

    -Entity References:
            // Need to fetch the Country entity first
            Country fromCountry = countryRepository.findById(addTourRequest.getFromCountryId())
                .orElseThrow(() -> new EntityNotFoundException("From country not found"));

            // Now you can set the entity reference
            tour.setFromCountry(fromCountry);

In summary, while fields like description, tourName, and price can be set directly from
the request object because they are self-contained data, the other fields require fetching
related entities to ensure valid references to existing records in your database.
This separation helps maintain the integrity and reliability of your data model.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DTO RESPONSE vs ENTITY @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Reasons for Returning a DTO (Data Transfer Object) instead of Entity:
Separation of Concerns:
    -Returning a User entity directly can expose more information than necessary
    to the client (like the password hash and any additional fields).
    -Using a response DTO like RegisterResponse allows you to control what information
    gets sent back to the client.
Clarity:
    -A RegisterResponse can include not just a success message but
    also other relevant information, like the user ID, username,
    email, and any other fields you want to return.
    -This makes it clear to the client that the operation was successful and
    provides necessary details without exposing the entire User entity.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ CustomUserDetailsService @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Explanation:
Mapping Roles to GrantedAuthority:
    -The user.getRoles() is a list of Role entities. We need to map this list to a collection
    of GrantedAuthority objects, specifically SimpleGrantedAuthority for each role.
    -The SimpleGrantedAuthority constructor accepts the role name as a String, which is why
    we assume your Role entity has a getRoleName() method.
Collecting the Authorities:
    -We use the stream() API to map each Role to a SimpleGrantedAuthority
    and then collect the results into a list.
Returning the Correct UserDetails:
    -The org.springframework.security.core.userdetails.User object requires a collection
    of GrantedAuthority as its third parameter, which is now properly passed.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@ REGISTER-LOGIN-LOGOUT @@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Implementing the Logout Function
You should implement the logout functionality in both the frontend and the backend.
Here's why:

Frontend:
    -Clear Local Storage: You need to remove the JWT from local storage or cookies to
    log the user out on the client-side.
    -Redirect User: Optionally redirect the user to the login page or home page.
Backend:
    -Optional Token Invalidity: If you want to have control over the user session (e.g.,
    implementing token blacklisting), it's useful to have a logout endpoint on the server.
    This can also help log users out from other sessions if your application allows them.

Frontend: The handleLogout function clears the token from local storage,
optionally calls a backend logout endpoint, and updates the user state.

Backend: Implementing a logout endpoint is optional but recommended if you need
to manage token invalidation or other session-related tasks.

This setup provides a clean separation of concerns, allowing the frontend
to manage the user interface and state while the backend can handle any
additional session management logic.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@ SUPER ADMIN CREATION LOGIC @@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
VARIANTS:
// -----------------------------------------------------------------------------------------------------------------
1. registerSuperAdmin way

//  What It Does:
//  - Validates Username Uniqueness: The method begins by checking whether the provided username
        ("superadmin") already exists in the database. If a user with this username is found, the
        method throws a UserAlreadyExistsException. This ensures that duplicate super admin accounts
        are not created, maintaining the integrity of the user management system.
//  - Constructs SuperAdmin Entity: If the username is unique, the method proceeds to map the incoming
        registration request data to a SuperAdmin entity. It utilizes a mapper (superAdminRegisterMapper)
        to convert the request into the appropriate entity format. This includes setting the username to
        "superadmin" and encoding the password (e.g., "superpassword") for secure storage.
//  - Assigns SUPER_ADMIN Role: The method then assigns the "SUPER_ADMIN" role to the newly created user.
        It retrieves this role from the database using the roleRepository. If the "SUPER_ADMIN" role does
        not exist, the method throws a RoleNotFoundException, ensuring that the super admin user is granted
        the necessary privileges.
//  - Persists the User: After mapping the data and assigning the role, the method saves the SuperAdmin
        entity to the database using superAdminRepository.save(superAdmin). This action effectively
        creates a new super admin user account in the system.
//  - Returns Response Object: Finally, upon successful registration, the method returns a
        SuperAdminRegisterResponse object. This response contains details about the newly
        created super admin, including their username and assigned roles, confirming that
        the registration process has been completed successfully.
        ``
            @Override
            public SuperAdminRegisterResponse registerSuperAdmin(SuperAdminRegisterRequest superAdminRegisterRequest) throws UserAlreadyExistsException {
                String username = superAdminRegisterRequest.getUsername();

                if (superAdminRepository.existsByUsername(username)) {
                    throw new UserAlreadyExistsException("A user with this username already exists.");
                }

                // Use the mapper to create the SuperAdmin entity
                SuperAdmin superAdmin = superAdminRegisterMapper.fromRequest(superAdminRegisterRequest);
                superAdmin.setPassword(passwordEncoder.encode(superAdminRegisterRequest.getPassword())); // Encode the password

                Role superAdminRole = roleRepository.findRoleByRoleName("SUPER_ADMIN")
                        .orElseThrow(() -> new RoleNotFoundException("Role 'SUPER_ADMIN' does not exist."));
                superAdmin.setRoles(Collections.singletonList(superAdminRole));

                superAdminRepository.save(superAdmin); // Save the super admin user

                // Use the mapper to create the response
                return superAdminRegisterMapper.toResponse(superAdmin); // Return the new response object
            }
            ``
=========------- EXPLANATION: -------=========
    Access Control: You would configure your security settings to restrict access to the registration
    endpoint (/api/auth/superadmin/register) to users who already possess the "SUPER_ADMIN" role.
    This means that only existing super admins can access the registration form to create new super admins.

    Role Management: With this setup, when an existing super admin wants to add new super admins
    (e.g., superadminHISNAME and superadminHERNAME), they can do so by filling out the registration
    form with the new user details. Each of these new super admins would then be granted the
    "SUPER_ADMIN" role upon successful registration.

    Adjusted Security Configuration:
    // Restrict super admin registration to existing super admins
        .requestMatchers(HttpMethod.POST, "/api/auth/superadmin/register").hasRole("SUPER_ADMIN")
// -----------------------------------------------------------------------------------------------------------------
2. PostConstruct Create way:

    // What It Does:
    //  1. PostConstruct Annotation (@PostConstruct): This annotation would cause the initSuperAdmin method to run automatically after the Spring application starts. It's useful for initializing certain data at the application's startup.
    //  2. The method createSuperAdminRoleAndUser checks if the "SUPER_ADMIN" role exists in the database:
    //  If the role exists: It retrieves the "SUPER_ADMIN" role.
    //  If the role does not exist: It creates and saves a new role with the name "SUPER_ADMIN".
    //  3. The code checks if a Super Admin user with the username "superadmin" already exists in the database:
    //  If the user does not exist: It creates a new Super Admin user with the username "superadmin" and the password "superpassword". (Note: In a real application, you'd want to use a more secure password.)
    //  Password encoding: The password is securely hashed using passwordEncoder.encode() before saving.
    //  The Super Admin user is assigned the "SUPER_ADMIN" role.
    //  The user is then saved into the superAdminRepository.

        @PostConstruct
        public void initSuperAdmin() {
            createSuperAdminRoleAndUser();
        }

        private void createSuperAdminRoleAndUser() {
            Role superAdminRole = roleRepository.findRoleByRoleName("SUPER_ADMIN")
                    .orElseGet(() -> {
                        Role newRole = new Role();
                        newRole.setRoleName("SUPER_ADMIN");
                        return roleRepository.save(newRole);
                    });

            // Check if the SUPER_ADMIN user already exists by username
            if (!superAdminRepository.existsByUsername("superadmin")) {
                SuperAdminRegisterRequest request = new SuperAdminRegisterRequest();
                request.setUsername("superadmin");
                request.setPassword("superpassword"); // Use a secure password in production

                // Use the mapper to convert the request to SuperAdmin entity
                SuperAdmin superAdmin = superAdminRegisterMapper.fromRequest(request);
                superAdmin.setPassword(passwordEncoder.encode(request.getPassword())); // Encode the password
                superAdmin.setRoles(Collections.singletonList(superAdminRole)); // Assign role

                superAdminRepository.save(superAdmin); // Save the super admin user
            }
        }
// -----------------------------------------------------------------------------------------------------------------
3. SuperAdminInitializer way:

        /**
         * SuperAdminInitializer class implements CommandLineRunner to perform initialization tasks
         * when the application starts. It checks for the existence of the SUPER_ADMIN role and a
         * super admin user. If they do not exist, it creates them with default credentials.
         * This ensures that there is always a super admin user with full privileges for
         * managing the application.
         */

        //  What It Does:
                    When the Spring application starts, this class checks if a super admin user
                    already exists. If not, it creates one with the username "superadmin" and a
                    password of "superpassword", which is then encoded.

                    This class ensures that there is always a super admin user present in the
                    database when the application is initialized.

        ``
        @Component
        public class SuperAdminInitializer implements CommandLineRunner {

            private final SuperAdminRepository superAdminRepository; // Use the SuperAdminRepository
            private final RoleRepository roleRepository;
            private final PasswordEncoder passwordEncoder;  // Use PasswordEncoder interface

            @Autowired
            public SuperAdminInitializer(SuperAdminRepository superAdminRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
                this.superAdminRepository = superAdminRepository; // Initialize with SuperAdminRepository
                this.roleRepository = roleRepository;
                this.passwordEncoder = passwordEncoder;
            }

            @Override
            public void run(String... args) throws Exception {
                // Check if the SUPER_ADMIN role exists, if not, create it
                Optional<Role> superAdminRoleOptional = roleRepository.findRoleByRoleName("SUPER_ADMIN");
                Role superAdminRole;
                if (superAdminRoleOptional.isEmpty()) {
                    superAdminRole = new Role();
                    superAdminRole.setRoleName("SUPER_ADMIN");
                    roleRepository.save(superAdminRole);
                } else {
                    superAdminRole = superAdminRoleOptional.get();
                }

                // Check if the super admin user exists, if not, create the user
                Optional<SuperAdmin> superAdminUserOptional = superAdminRepository.findSuperAdminByUsername("superadmin");
                if (superAdminUserOptional.isEmpty()) {
                    SuperAdmin superAdminUser = new SuperAdmin(); // Create a new SuperAdmin instance
                    superAdminUser.setUsername("superadmin");
                    superAdminUser.setPassword(passwordEncoder.encode("superpassword")); // Ensure this is secure
                    superAdminUser.setRoles(Collections.singletonList(superAdminRole)); // Assign the SUPER_ADMIN role
                    superAdminRepository.save(superAdminUser); // Save using SuperAdminRepository

                    System.out.println("Super Admin user created with username: superadmin and full privileges.");
                } else {
                    System.out.println("Super Admin user already exists.");
                }
            }
        }
        ``
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@ WEB / SECURITY CONFIGS @@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1. WebSecurityConfig
    Purpose: This class is specifically focused on configuring Spring Security for
    your application. It defines security filters, authentication mechanisms,
    authorization rules, CORS configuration, and CSRF protection.

    Usage: It usually contains methods to configure the security filter chain (SecurityFilterChain),
    authentication manager, and other security-related settings. This class is annotated with
    @Configuration and @EnableWebSecurity.

2. SecurityConfig
    Purpose: The name SecurityConfig is commonly used as a shorthand for a security configuration
    class, similar to WebSecurityConfig. However, it may not always follow the same conventions
    or naming. In many cases, developers might use it interchangeably with WebSecurityConfig.

    Usage: Depending on your project, SecurityConfig could either encompass security
    settings in a general context or be synonymous with WebSecurityConfig. It might
    be more common to see WebSecurityConfig in modern applications as it explicitly
    reflects its role in configuring web security.

3. WebConfig
    Purpose: This class generally handles the broader web-related configurations for a Spring
    application, such as CORS settings, view resolvers, and other MVC configurations. It does
    not specifically handle security but focuses on web layer settings.

    Usage: It implements WebMvcConfigurer and might include methods like addCorsMappings,
    addViewControllers, and configureMessageConverters. This class is meant to centralize
    all web-specific configurations that are not directly related to security.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@ EXCEPTION HANDLING @@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

## Exception Handling in Java: Best Practices
// ------------------------------------------------------------------------------------------
### 1. **Using `throws` vs. `try-catch`

**Question:** Why do you have to do both `try-catch` and `throws exception` in
              some cases? Can't you just use only ONE of the two?
**Answer:**
- throws:
    indicates that a method can throw an exception,
    informing callers that they need to handle it.
- try-catch:
    allows you to handle exceptions directly within the method.
    You can use one or both based on the scenario:

  - Use `try-catch` when you can handle the exception immediately.
  - Use `throws` when you want to propagate the exception to the caller, allowing them to decide how to handle it.

**Example:**
    ```
    @Override
    public SuperAdminLoginResponse loginSuperAdmin(SuperAdminLoginRequest loginRequest) throws AuthenticationFailedException {
        UserDetails userDetails;
        try {
            // Load user by username
            userDetails = customUserDetailsService.loadUserByUsername(loginRequest.getUsername());
        } catch (UsernameNotFoundException e) {
            // Handle the exception directly
            throw new AuthenticationFailedException("Authentication failed: SuperAdmin not found.");
        }
        // Further processing...
    }
    ```
// ------------------------------------------------------------------------------------------
### 2. **Handling Multiple Exceptions**

**Question:** Why do we sometimes see both `try-catch` and `throws`
              for the same exception in one method?
**Answer:**
- The `throws` declaration at the method level indicates that this method can throw exceptions
to its callers, while `try-catch` allows specific handling of exceptions within the method.

- Itâ€™s a good practice to manage expected exceptions locally while still signaling
to callers that they need to be prepared for other potential exceptions.

**Example:**
    ```
    @Override
    public SuperAdminLoginResponse loginSuperAdmin(SuperAdminLoginRequest loginRequest) throws AuthenticationFailedException {
        UserDetails userDetails;
        try {
            // Attempt to load user details
            userDetails = customUserDetailsService.loadUserByUsername(loginRequest.getUsername());
        } catch (UsernameNotFoundException e) {
            // Local handling for this specific scenario
            throw new AuthenticationFailedException("Authentication failed: SuperAdmin not found.");
        }
        // Verify password logic...
    }
    ```
// ------------------------------------------------------------------------------------------
### 3. **General vs. Specific Exceptions**

**Question:** Should I use generic exceptions or specific ones? Whatâ€™s the best practice?
**Answer:**
    - Use specific exceptions for better clarity and control. This approach provides
        more information about the error context and helps in debugging.
    - Generic exceptions can obscure the cause and make it harder to pinpoint issues.
// ------------------------------------------------------------------------------------------
### 4. **Using Access Denied Exceptions**

**Question:** How should we implement access control in methods like login?
**Answer:**
- Use exceptions to restrict access based on roles. For instance, SuperAdmins
    should not access regular user login methods.

**Example:**
                ```
                @Override
                public LoginResponse login(LoginRequest loginRequest) throws AuthenticationFailedException {
                    UserDetails userDetails;
                    try {
                        userDetails = customUserDetailsService.loadUserByUsername(loginRequest.getUsername());
                    } catch (UsernameNotFoundException e) {
                        throw new AuthenticationFailedException("Authentication failed: User not found.");
                    }

                    // Check if the user is a SuperAdmin
                    boolean isSuperAdmin = userDetails.getAuthorities().stream()
                            .anyMatch(auth -> auth.getAuthority().equals("SUPER_ADMIN"));
                    if (isSuperAdmin) {
                        throw new AccessDeniedException("Access denied: SuperAdmins cannot use this login route.");
                    }

                    // Further password verification logic...
                }
                ```
// ------------------------------------------------------------------------------------------
### Conclusion
Managing exceptions effectively in Java helps maintain code clarity and enhances error handling.
Always aim to use specific exceptions and be aware of access controls to ensure proper application behavior.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@ HASHING PASSWORD @@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Important Notes
Security:
Using BCrypt ensures that passwords are stored securely. BCrypt automatically handles the
salting and hashing of passwords, making it a suitable choice for securing user passwords.

Password Validation:
When a user logs in, you will need to use the same BCryptPasswordEncoder to validate the
password by comparing the raw password with the hashed password stored in the database.

Login Validation Example
Hereâ€™s a brief example of how you would validate a user's password during login:
            @Autowired
            private BCryptPasswordEncoder passwordEncoder; // Inject BCryptPasswordEncoder

            public boolean validateUser(String rawPassword, String storedHashedPassword) {
                return passwordEncoder.matches(rawPassword, storedHashedPassword);
            }


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@ getAll vs getById @@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
## Introduction
In RESTful APIs, it is common to implement methods to retrieve data from a database.
Two common types of retrieval methods are `getAll` and `getById`. Understanding the
differences and use cases for each is crucial for effective API design and implementation.

------------------------------------------------
## 1. getAll Method
------------------------------------------------
### Definition
The `getAll` method is used to retrieve a collection of records from a database or data source.
This method returns all entries of a specific entity type.

### Example Implementation:

            @GetMapping("/countries")
            public ResponseEntity<List<CountryResponse>> getAllCountries() {
                List<Country> countries = service.findAllCountries();
                List<CountryResponse> countryResponses = countries.stream()
                        .map(countryMapper::toResponse)
                        .toList();
                return ResponseEntity.ok(countryResponses); // Returns 200 OK with the list of countries
            }

Use Cases:
Dropdown Lists:
    Useful for populating dropdown menus in user interfaces,
    where users can select from multiple options.
Data Visualization:
    Ideal for displaying all available records
    in a list, table, or grid format.
Bulk Operations:
    Necessary for operations that need to
    process multiple records at once.

HTTP Method
Typically uses the HTTP GET method.


------------------------------------------------
2. getById Method
------------------------------------------------
Definition
The getById method is used to retrieve a specific record from a database by its
unique identifier (ID). This method returns a single entity.

### Example Implementation:

            @GetMapping("/countries/{id}")
            public ResponseEntity<CountryResponse> getCountryById(@PathVariable Long id) {
                Country country = service.getCountryById(id);
                CountryResponse countryResponse = countryMapper.toResponse(country);
                return ResponseEntity.ok(countryResponse); // Returns 200 OK with the specific country
            }

Use Cases:
Detail View:
    Used when you need to show detailed information
    about a specific record, such as on a detail page.
Update Operations:
    Useful for fetching an entity before editing, so that
    the current values can be displayed in a form.
Validation:
    Can be used to verify the existence of a record before
    performing operations that depend on that record.

HTTP Method
Typically uses the HTTP GET method, but may also be involved in PUT or DELETE operations.

------------------------------------------------
3. Key Differences

                getAll	                                getById
Purpose	        Retrieve a collection of records	    Retrieve a specific record
Return Type	    List of entities	                    Single entity
Use Cases	    Dropdowns, lists, visualizations	    Detail views, updates, validations
HTTP Method	    GET	                                    GET (for retrieval)

Conclusion
Understanding the distinction between getAll and getById methods is
essential for designing APIs that efficiently retrieve and manipulate data.

Use getAll for scenarios requiring multiple records and
getById for scenarios needing specific record details.

By utilizing both methods appropriately, you can create a more robust and user-friendly application.






